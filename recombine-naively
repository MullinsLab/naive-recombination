#!/usr/bin/env perl
use strict;
use warnings FATAL => 'all';

=head1 NAME

recombine-naively - Naively recombine input sequences at specified breakpoints

=head1 SYNOPSIS

    recombine-naively --breakpoint=N [--breakpoint=N] [--group-by-file] [file.fasta ...]
    recombine-naively --help

=head1 DESCRIPTION

Produces naive recombinant sequences (hard breaks, no mutation) from all
possible combinations of input sequences.

Input and output is in the FASTA format.

If no input files are provided, stdin is read.  Output is always to stdout.

Output sequences are named in the following manner:

    foo|@113|bar|@242|baz

where C<foo>, C<bar>, and C<baz> are the input sequence names and C<113> and
C<242> are the breakpoint locations between the adjacent sequences.

=head1 OPTIONS

=over 8

=item B<--breakpoint=N>

=item B<-b N>

Specify a breakpoint should occur I<after> position N.  Positions are 1-based.

This option may be repeated to add multiple breakpoints.  N may also be a
comma-separated list of positions.

The number of breakpoints may not exceed the number of sequences and breakpoint
positions must fall within the length of the shortest sequence.

=item B<--group-by-file>

With this option, multiple files are treated as groups of similar sequences, or
subtypes.  Sequences are recombined with sequences from other files but not
with sequences from the same file.

Without this option, multiple files are treated the same as a single file: all
sequences are recombined with each other.

=item B<--help>

Show this help.

=back

=head1 INSTALLATION

Currently the only supported way is using L<cpanm>:

    cpanm --installdeps .

This will install the dependencies for everyone on the system and then you can
run this program.  You can also install dependencies in a F<local/> directory
just for you:

    cpanm --installdeps -L local .

If you don't have L<cpanm> already, you can still install the dependencies in
one go:

    curl -fsSL https://cpanmin.us | perl - --installdeps -L local .

Alternatively, you can install the dependencies in F<cpanfile> manually with
the standard L<cpan> command.  This is equivalent to installing system-wide
with cpanm.

=head1 AUTHOR

Thomas Sibley <trsibley@uw.edu>

=head1 COPYRIGHT & LICENSE

Copyright (c) 2014-2015 Mullins Lab, University of Washington.

This software is licensed under the GNU General Public License, version 2.

=cut

use FindBin;
use lib "$FindBin::RealBin/local/lib/perl5";

use Pod::Usage;
use Getopt::Long;
use File::Basename qw< basename >;
use Bio::SeqIO;
use Algorithm::Combinatorics qw< variations_with_repetition >;
use List::AllUtils qw< any min uniq zip pairgrep pairmap >;

my (@breakpoints, $group_by_file);
GetOptions(
    "breakpoints|b=s" => \@breakpoints,
    "group-by-file"   => \$group_by_file,
    "help" => sub {
        pod2usage( -verbose => 99, -sections => [qw( SYNOPSIS DESCRIPTION OPTIONS )] );
    },
) or pod2usage();

@breakpoints = split /,/, join ',', @breakpoints;

pod2usage("No breakpoints specified.  Run with --help to see full usage.")
    unless @breakpoints;

die "Breakpoints must be a positive integer\n"
    if grep { /\D/ or $_ < 1 or $_ != int $_ } @breakpoints;

@breakpoints = sort { $a <=> $b } uniq @breakpoints;

pod2usage("More than one file must be specified with --group-by-file.")
    unless @ARGV > 1;

my $output = Bio::SeqIO->newFh( -fh => \*STDOUT, -format => 'fasta' );
my @input  = @ARGV
    ? (map { +{ -file => $_ } } @ARGV)
    : { -fh => \*STDIN };

my @sequences = map {
    my $fasta = Bio::SeqIO->newFh( %$_, -format => 'fasta' );
    [ <$fasta> ]
} @input;

# Unroll separate file groups into a single group if we don't need 'em
@sequences = [ map { @$_ } @sequences ]
    unless $group_by_file;

my $max_breakpoints = $group_by_file
    ? @sequences
    : @{ $sequences[0] };

die "Number of breakpoints (", scalar @breakpoints, ") ",
    "exceeds number of sequences or sequence groups ($max_breakpoints)\n"
    if @breakpoints > $max_breakpoints;

my $min_seq_length = min map { $_->length } map { @$_ } @sequences;
die "Breakpoints must be within the length of the shortest sequence ($min_seq_length).\n"
    if any { $_ >= $min_seq_length } @breakpoints;

# Generate all variations, with repetition, of keys identifying group and
# sequence.  Then filter out variations we don't want such as those with a
# "breakpoint" that doesn't switch sequences or those which include more than
# one sequence from a subtype group.
my @groups  = 0 .. $#sequences;
my @indices =
        map { encode_group_index(@$_) }             # Transform to strings: 0#1, 0#2, 0#3, 1#1, 1#2, ...
    pairmap { map { [$a, $_] } 0 .. (@$b - 1) }     # Unroll groups into tuples: [0, 1], [0, 2], [0, 3], [1, 1], [1, 2], ...
        zip @groups, @sequences;                    # Interleave group indexes and sequence arrayrefs

my @variations     = variations_with_repetition(\@indices, scalar @breakpoints + 1);
my @recombinations = grep {
        not self_adjacent(@$_)
    and (@groups == 1 or not intra_group_repetition(@$_))
} @variations;

# Now loop through the remaining indices, stitching the pieces of the sequences
# together for each combination and outputting them.
for my $combo (@recombinations) {
    my @seqs = map {
        my ($group, $index) = decode_group_index($_);
        $sequences[$group][$index];
    } @$combo;
    my $recombined = Bio::Seq->new(
        -id => join("|",
            $seqs[0]->id,
            map { sprintf '@%d|%s', $breakpoints[$_], $seqs[$_ + 1]->id } 0 .. $#breakpoints
        ),
    );

    my @subseqs = (@breakpoints, $seqs[-1]->length);
    my $last_bp = 0;
    my $bases;

    for my $seq (@seqs) {
        my $pos  = shift @subseqs;
        $bases  .= $seq->subseq($last_bp + 1, $pos);
        $last_bp = $pos;
    }
    $recombined->seq($bases);
    print { $output } $recombined;
}

# Below here lie helper functions
sub encode_group_index {  join "#", @_[0, 1] }  # 4, 2 -> 4#2
sub decode_group_index { split /#/, $_[0], 2 }  # 4#2  -> 4, 2

sub self_adjacent {
    # Filter out variations where the same sequence is adjacent to itself.
    my @seqs = @_;                      #  1, 2, 3
    my @from = @seqs[0 .. $#seqs - 1];  #  1, 2
    my @to   = @seqs[1 .. $#seqs];      #     2, 3
    my @zip  = zip @from, @to;          #  1 => 2, 2 => 3
    return scalar pairgrep { $a eq $b } @zip;
}

sub intra_group_repetition {
    # Filter out variations with multiple sequences from the same group.
    my @seqs = @$_;
    my $seen = {};
    $seen->{ $_->[0] }{ $_->[1] }++
        for map { [decode_group_index($_)] } @seqs;
    return scalar grep { keys %$_ > 1 } values %$seen;
}
